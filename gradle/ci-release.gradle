// TODO actually hook up to a CI. Until we hook up a CI follow these steps:
// 1. Check out the repo and sync to the commit you want to release.
// 2. Tag the commit by running `git tag -a -m "Release v$version" "v$version"`, replacing $version with the semver.
// 3. Push the tag by running `git push --tags`
// 4. Upload to bintray by running `./gradlew bintrayUploadAll`.
// 5. Go to GitHub and make a release from the tag.

// Task to fail fast and clearly if required properties are not set.
task verifyBintrayProperties {
  doFirst {
    if (System.getenv('BINTRAY_USER') == null) {
      throw new Exception("Environment variable BINTRAY_USER not set.");
    }
    if (System.getenv('BINTRAY_KEY') == null) {
      throw new Exception("Environment variable BINTRAY_USER not set.");
    }
  }
}

task bintrayUploadAll {
  description = "Runs 'bintrayUpload' tasks from all projects"
  mustRunAfter gitPush //git push is easier to rollback so we run it first
}

allprojects {
  tasks.matching { it.name == "bintrayUpload" }.all {
    it.dependsOn verifyBintrayProperties
    bintrayUploadAll.dependsOn it
  }
}

task ciPerformRelease {
  description = "Performs the release, intended to be ran on CI"
  dependsOn "gitTag", "gitPush", "bintrayUploadAll"
}

task gitTag {
  description = "Creates annotated tag 'v$version'"

  doLast {
    println "Setting Git user and email to GitHub CI"
    exec { commandLine "git", "config", "user.email", "noreply@github.com" }
    exec { commandLine "git", "config", "user.name", "GitHub Releaser" }
    println "Creating tag v$version"
    exec { commandLine "git", "tag", "-a", "-m", "Release $version", "v$version" }
    println "Created tag v$version"
  }
}

task gitPush(type: Exec) {
  description = "Pushes tags by running 'git push --tags'. Hides secret key from git push output."
  mustRunAfter "gitTag" //tag first, push later

  doFirst { println "Pushing tag v$version" }
  commandLine "./gradle/git-push.sh", "v$version"
  doLast { println "Pushed tag v$version" }
}